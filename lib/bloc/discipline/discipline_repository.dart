import 'dart:convert';
import 'dart:developer';
import 'package:http/http.dart' as http;
import 'discipline.dart';

class DisciplineRepository{
  Future<List<Discipline>?> getCoursesList() async {
    try {
      final response = await http.post(
        Uri.parse('http://127.0.0.1:8000/api/get_courses_list/'),
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept-Charset': 'utf-8',
        },
        body: jsonEncode({}),
      );
      log('Raw response: ${response.body}');

      final data = jsonDecode(utf8.decode(response.bodyBytes));
      if (data != null && data is List) {
        log('üìå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $data');
        return data.map((json) => Discipline.fromJson(json)).toList();
      } else {
        log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        return null;
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
      return null;
    }
  }

  Future<bool> addCourse({
    required String name,
    required List<int> teacherIds,
    required List<int> groupIds,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('http://127.0.0.1:8000/api/add_course/'),
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept-Charset': 'utf-8',
        },
        body: jsonEncode({
          'name': name,
          'teachers': teacherIds,
          'groups': groupIds,
        }),
      );

      final data = jsonDecode(utf8.decode(response.bodyBytes));
      if (response.statusCode == 201 || response.statusCode == 200) {
        log('‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $data');
        return true;
      } else {
        log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞: ${response.statusCode}, $data');
        return false;
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: $e');
      return false;
    }
  }

  Future<bool> updateCourse({
    int? courseId,
    String? name,
    List<int>? teacherIds,
    List<int>? groupIds,
    required bool appendTeachers,
  }) async {
    try {
      final response = await http.put(
        Uri.parse('http://127.0.0.1:8000/api/update_course/'),
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept-Charset': 'utf-8',
        },
        body: jsonEncode({
          'course_id': courseId,
          'name': name,
          'teachers': teacherIds,
          'groups': groupIds,
          'append_teachers': appendTeachers,
        }),
      );

      final data = jsonDecode(utf8.decode(response.bodyBytes));
      if (response.statusCode == 201 || response.statusCode == 200) {
        log('‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $data');
        return true;
      } else {
        log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞: ${response.statusCode}, $data');
        return false;
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: $e');
      return false;
    }
  }

  Future<bool> deleteCourse({
    required int courseId,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('http://127.0.0.1:8000/api/delete_course/'),
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept-Charset': 'utf-8',
        },
        body: jsonEncode({"course_id": courseId}),
      );
      final data = jsonDecode(utf8.decode(response.bodyBytes));
      if (data != null) {
        log('üìå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $data');
        return true;
      } else {
        log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        return false;
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
      return false;
    }
  }
}