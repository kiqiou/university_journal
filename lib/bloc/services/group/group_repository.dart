import 'dart:convert';
import 'dart:developer';

import 'models/group.dart';
import 'package:http/http.dart' as http;

class GroupRepository {
  Future<List<Group>?> getGroupsList() async {
    final response = await http.get(
      Uri.parse('http://127.0.0.1:8000/group/api/get_groups_list/'),
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept-Charset': 'utf-8',
      },
    );

    final data = jsonDecode(utf8.decode(response.bodyBytes));
    print('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $data} ');
    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      return data.map((groupJson) => Group.fromJson(groupJson)).toList();
    } else {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø');
    }
  }

  Future<bool> addGroup({
    required String name,
    required List<int> studentIds,
    required int courseId,
    required int facultyId,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('http://127.0.0.1:8000/group/api/add_group/'),
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept-Charset': 'utf-8',
        },
        body: jsonEncode({
          'name': name,
          'students': studentIds,
          'faculty': facultyId,
          'course': courseId,
        }),
      );

      final data = jsonDecode(utf8.decode(response.bodyBytes));
      if (response.statusCode == 201 || response.statusCode == 200) {
        log('‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: $data');
        return true;
      } else {
        log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: ${response.statusCode}, $data');
        return false;
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: $e');
      return false;
    }
  }

  Future<bool> updateGroup({
    required int groupId,
    String? name,
    List<int>? studentIds,
    int? courseId,
    int? facultyId,
  }) async {
    try {
      final response = await http.put(
        Uri.parse('http://127.0.0.1:8000/group/api/update_group/'),
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept-Charset': 'utf-8',
        },
        body: jsonEncode({
          'group_id': groupId,
          'name': name,
          'students': studentIds,
          'faculty': facultyId,
          'course': courseId,
        }),
      );

      final data = jsonDecode(utf8.decode(response.bodyBytes));
      if (response.statusCode == 201 || response.statusCode == 200) {
        log('‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: $data');
        return true;
      } else {
        log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: ${response.statusCode}, $data');
        return false;
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: $e');
      return false;
    }
  }

  Future<bool> deleteGroup({
    required int groupId,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('http://127.0.0.1:8000/group/api/delete_group/'),
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept-Charset': 'utf-8',
        },
        body: jsonEncode({"group_id": groupId}),
      );
      final data = jsonDecode(utf8.decode(response.bodyBytes));
      if (data != null) {
        log('üìå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $data');
        return true;
      } else {
        log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        return false;
      }
    } catch (e) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
      return false;
    }
  }
}
